{"componentChunkName":"component---src-templates-blog-post-js","path":"/clean-code-05/","result":{"data":{"site":{"siteMetadata":{"title":"Kirahaa"}},"markdownRemark":{"id":"891768a8-7fbd-5818-a1bf-09811269af63","excerpt":"📌 1주차 - Assignment #05 📚 TIL (2024.01.31) -…","html":"<blockquote>\n<p>📌 <strong>1주차 - Assignment #05</strong></p>\n<h4>📚 TIL (2024.01.31) - 4장. 주석</h4>\n</blockquote>\n<h3>🎈 책에서 기억하고 싶은 내용을 써보세요.</h3>\n<p>\"나쁜 코드에 주석을 달지 마라. 새로 짜라.\"</p>\n<p>우리에게 프로그래밍 언어를 치밀하게 사용해 의도를 표현할 능력이 있다면, 주석은 거의 필요하지 않을 것이다. 아니, 전혀 필요하지 않다.</p>\n<p>우리는 코드로 의도를 표현하지 못해, 그러니까 실패를 만회하기 위해 주석을 사용한다.</p>\n<p>주석은 오래될수록 코드에서 멀어진다. 오래될 수록 완전히 그릇될 가능성도 커진다. 프로그래머들이 주석을 유지하고 보수하기란 현실적으로 불가능하니까.</p>\n<p>부정확한 주석은 아예 없는 주석보다 훨씬 더 나쁘다.</p>\n<p>진실은 코드에서만이 존재한다. 코드만이 정확한 정보를 제공하는 유일한 출처다. 그러므로 우리는 주석을 가능한 줄이도록 꾸준히 노력해야 한다.</p>\n<h5>주석은 나쁜 코드를 보완하지 못한다.</h5>\n<p>코드에 주석을 추가하는 일반적인 이유는 코드 품질이 나쁘기 때문이다.\n자신이 저지른 난장판을 주석으로 설명하려 애쓰는 대신에 그 난장판을 깨끗이 치우는 데 시간을 보내라!</p>\n<h5>코드로 의도를 표현하라!</h5>\n<p>확실히 코드만으로 의도를 설명하기 어려운 경우가 존재한다.\n몇 초만 더 생각하면 코드로 대다수 의도를 표현할 수 있다. 많은 경우 주석으로 달려는 설명을 함수로 만들어 표현해도 충분하다.</p>\n<h5>좋은 주석</h5>\n<p>어떤 주석은 필요하거나 유익하다. 다만, 정말로 좋은 주석은, 주석을 달지 않을 방법을 찾아낸 주석이라는 사실을 명심해야 한다.</p>\n<p><strong>1. 법적인 주석</strong><br/>\n때로는 회사가 정립한 구현 표준에 맞춰 법적인 이유로 특정 주석을 넣으라고 명시한다.\n예를 들어, 각 소스 파일 첫머리에 주석으로 들어가는 저작권 정보와 소유권 정보는 필요하고도 타당하다.</p>\n<p><strong>2. 정보를 제공하는 주석</strong><br/>\n기본적인 정보를 주석으로 제공하면 편리하다. 그래도 가능하다면, 함수 이름에 정보를 담는 편이 좋다.</p>\n<p><strong>3. 의도를 설명하는 주석</strong><br/>\n구현을 이해하게 도와주는 것을 넘어 결정에 깔린 의도까지 설명하는 경우.</p>\n<p><strong>4. 의미를 명료하게 밝히는 주석</strong><br/>\n일반적으로는 인수나 반환값 자체를 명확하게 만들면 더 좋겠지만,\n인수나 반환값이 표준 라이브러리나 변경하지 못하는 코드에 속한다면 의미를 명료하게 밝히는 주석이 유용하다.</p>\n<p><strong>5. 결과를 경고하는 주석</strong><br/>\n다른 프로그래머에게 결과를 경고할 목적의 주석</p>\n<p><strong>6. TODO 주석</strong><br/>\n\"앞으로 할 일\"을 적어두는 주석\nTODO 주석은 프로그래머가 필요하다 여기지만 당장 구현하기 어려운 업무를 기술한다.\n그래도 TODO로 떡칠한 코드는 바람직하지 않다. 그러므로 주기적으로 TODO 주석을 점검해 없애도 괜찮은 주석은 없애야 한다.</p>\n<p><strong>7. 중요성을 강조하는 주석</strong><br/>\n자칫 대수롭지 않다고 여겨질 뭔가의 중요성을 강조하기 위한 주석.</p>\n<p><strong>8. 공개 API에서 Javadocs</strong><br/>\n설명이 잘 된 공개 API는 유용하고 만족스럽다.</p>\n<h5>나쁜 주석</h5>\n<p>일반적으로 대다수 주석은 허술한 코드를 지탱하거나, 엉성한 코드를 변명하거나, 미숙한 결정을 합리화하는 등 프로그래머가 주절거리는 독백에서 크게 벗어나지 못한다.</p>\n<p><strong>1. 주절거리는 주석</strong><br/>\n특별한 이유 없이 의무감으로 혹은 프로세스에서 하라고 하니까 마지못해 주석을 단다면 전적으로 시간낭비다. 주석을 달기로 결정했다면 충분한 시간을 들여 최고의 주석을 달도록 노력한다.</p>\n<p><strong>2. 같은 이야기를 중복하는 주석</strong><br/>\n자칫하면 코드보다 주석을 읽는 시간이 더 오래 걸린다.</p>\n<p><strong>3. 오해할 여지가 있는 주석</strong><br/>\n때때로 의도는 좋았으나 프로그래머가 딱 맞을 정도로 엄밀하게는 주석을 달지 못하기도 한다.</p>\n<p><strong>4. 의무적으로 다는 주석</strong><br/>\n모든 함수에 Javadocs를 달거나 모든 변수에 주석을 달아야 한다는 규칙은 어리석기 그지없다. 코드를 복잡하게 만들며, 거짓말을 퍼뜨리고, 혼동과 무질서를 초래한다.</p>\n<p><strong>5. 이력을 기록하는 주석</strong><br/>\n때때로 사람들은 모듈을 편집할 때마다 모듈 첫머리에 주석을 추가한다.\n예전에는 모든 모듈 첫머리에 변경 이력을 기록하고 관리하는 관례가 바람직했다.\n당시에는 소스 코드 관리 시스템이 없었으니까. 하지만 이제는 혼란만 가중할 뿐이니, 완전히 제거하는 편이 좋다.</p>\n<p><strong>6. 있으나 마나 한 주석</strong><br/>\n때때로 있으나 마나 한 주석을 접한다. 쉽게 말해, 너무나 당연한 사실을 언급하며 새로운 정보를 제공하지 못하는 주석이다.\n있으나 마나 한 주석을 달려는 유혹을 벗어나 코드를 정리하라. 더 낫고, 행복한 프로그래머가 되는 지름길이다.</p>\n<p><strong>7. 무서운 잡음</strong><br/>\n때로는 Javadocs도 잡음이다. ex) 잘라서 붙여넣기해 잘못 표기한 주석..</p>\n<p><strong>8. 함수나 변수로 표현할 수 있다면 주석을 달지 마라</strong><br/>\n주석이 필요하지 않도록 함수 이름을 작성하는 편이 더 낫다.</p>\n<p><strong>9. 위치를 표시하는 주석</strong><br/>\n때때로 프로그래머는 소스 파일에서 특정 위치를 표시하려 주석을 사용한다.</p>\n<deckgo-highlight-code   >\n          <code slot=\"code\">// Actions  //////////////////////////////</code>\n        </deckgo-highlight-code>\n<p>극히 드물지만 위와 같은 배너 아래 특정 기능을 모아놓으면 유용한 경우도 있긴 하다. 하지만 일반적으로 위와 같은 주석은 가독성만 낮추므로\n제거해야 마땅하다. 특히 뒷부분에 슬래시(/)로 이어지는 잡음은 제거하는 편이 좋다.</p>\n<p><strong>10. 닫는 괄호에 다는 주석</strong><br/>\n때로는 프로그래머들이 닫는 괄호에 특수한 주석을 달아놓는다. 중첩이 심하고 장황한 함수라면 의미가 있을지 모르지만 (우리가 선호하는)\n작고 캡슐화된 함수에는 잡음일 뿐이다. 그러므로 닫는 괄호에 주석을 달아야겠다는 생각이 든다면 대신에 함수를 줄이려 시도하자.</p>\n<p><strong>11. 공로를 돌리거나 저자를 표시하는 주석</strong><br/></p>\n<deckgo-highlight-code   >\n          <code slot=\"code\">/* 릭이 추가함 */</code>\n        </deckgo-highlight-code>\n<p>소스 코드 관리 시스템은 누가 언제 무엇을 추가했는지 귀신처럼 기억한다.\n저자 이름으로 코드를 오염시킬 필요가 없다. 주석이 있으면 다른 사람들이 코드에 관해 누구한테 물어볼지 아니까 위와 같은 주석이 있으면\n다른 사람들이 코드에 관해 누구한테 물어볼지 아니까 위와 같은 주석이 유용하다 여길지도 모르겠다. 하지만 현실적으로 이런 주석은 그냥\n오랫동안 코드에 방치되어 점차 부정확하고 쓸모없는 정보로 변하기 쉽다.</p>\n<p><strong>12. 주석으로 처리한 코드</strong><br/>\n주석으로 처리한 코드는 다른 사람들이 지우기를 주저한다. 이유가 있어 남겨놓았으리라고,\n중요하니까 지우면 안 된다고 생각한다. 그래서 질 나쁜 와인병 바닥에 앙금이 쌓이듯 쓸모 없는 코드가 점차 쌓여간다.\n우리는 오래전부터 우수한 소스 코드 관리 시스템을 사용해왔다. 이제는 주석으로 처리할 필요가 없다. 그냥 코드를 삭제하라. 잃어버릴 염려는 없다. 약속한다.</p>\n<p><strong>13. HTML 주석</strong><br/>\n소스 코드에서 HTML 주석은 혐오 그 자체다.</p>\n<p><strong>14. 전역 정보</strong><br/>\n주석을 달아야 한다면 근처에 있는 코드만 기술하라. 코드 일부에 주석을 달면서 시스템의 전반적인 정보를 기술하지 마라.</p>\n<p><strong>15. 너무 많은 정보</strong><br/>\n주석에다 흥미로운 역사나 관련 없는 정보를 장황하게 늘어놓지 마라.</p>\n<p><strong>16. 모호한 관계</strong><br/>\n주석과 주석이 설명하는 코드는 둘 사이 관계가 명백해야 한다.</p>\n<p><strong>17. 함수 헤더</strong><br/>\n짧은 함수는 긴 설명이 필요 없다. 짧고 한 가지만 수행하며 이름을 잘 붙인 함수가 주석으로 헤더를 추가한 함수보다 훨씬 좋다.</p>\n<p><strong>18. 비공개 코드에서 Javadocs</strong><br/>\n공개 API는 Javadocs가 유용하지만 공개하지 않을 코드라면 Javadocs는 쓸모가 없다.\n시스템 내부에 속한 클래스와 함수에 Javadocs를 생성할 필요는 없다. 유용하지 않을 뿐만 아니라 Javadocs 주석이 요구하는 형식으로 인해 코드만 보기 싫고 산만해질 뿐이다.</p>\n<h3>🎈 오늘 읽은 소감은? 떠오르는 생각을 가볍게 적어보세요.</h3>\n<p>오늘 작업하면서도 나름 다른 사람들이 이해하기 쉬우라고 주석을 잔뜩 달아놨는데, 오늘 이런 내용을 읽으니 바로 반성하게 되었다..^^<br/>\n예전에는 주석을 꼼꼼하게 잘 달아놓는 것이 중요하다고 생각했는데, 이 글에선 주석은 거의 달지 않는 게 좋다고하니..ㅎㅎ<br/>\n좋은 주석도 있지만 가장 좋은 건 주석을 달 필요 없이 코드부터 잘 짜는 게 중요하다는 것. 명심하기~!☆</p>\n<h3>🎈 궁금한 내용이나, 잘 이해되지 않는 내용이 있다면 적어보세요.</h3>\n<p>아무래도 Java 언어를 기반으로 예시 코드를 설명하다보니 이해가 안가는 코드들이 있긴 하다..<br/>\nJavascript를 기반으로 설명해 줬으면 좋겠는데, 그 부분이 조금 아쉽긴 하다!</p>","frontmatter":{"title":"노개북 - 클린코드 Assignment 05","date":"January 31, 2024","description":"노마드코더 개발자북클럽 클린코드 다섯번째 과제입니다.","tags":["노개북","노마드코더","개발자북클럽","cleancode"]}},"previous":{"fields":{"slug":"/clean-code-04/"},"frontmatter":{"title":"노개북 - 클린코드 Assignment 04"}},"next":{"fields":{"slug":"/clean-code-06/"},"frontmatter":{"title":"노개북 - 클린코드 Assignment 06"}}},"pageContext":{"id":"891768a8-7fbd-5818-a1bf-09811269af63","previousPostId":"517140ba-f6b2-55d4-8bbe-edcc8305b6ed","nextPostId":"b34b0a94-539c-52be-848d-2c0904436714"}},"staticQueryHashes":["1085474499","2837417301"],"slicesMap":{}}