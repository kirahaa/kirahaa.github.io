{"componentChunkName":"component---src-templates-blog-post-js","path":"/clean-code-11/","result":{"data":{"site":{"siteMetadata":{"title":"Kirahaa"}},"markdownRemark":{"id":"a2968c4e-5fac-5092-9a6e-f0720e47d132","excerpt":"📌 3주차 - Assignment #11 📚 TIL (2024.02.12) - 1…","html":"<blockquote>\n<p>📌 <strong>3주차 - Assignment #11</strong></p>\n<h4>📚 TIL (2024.02.12) - 10장. 클래스</h4>\n</blockquote>\n<h3>🎈 책에서 기억하고 싶은 내용을 써보세요.</h3>\n<p>코드의 표현력과 그 코드로 이루어진 함수에 아무리 신경 쓸지라도 좀 더 높은 차원 높은 단계까지 신경 쓰지 않으면 깨끗한 코드를 얻기는 어렵다.</p>\n<h5>클래스 체계</h5>\n<p>클래스를 정의하는 표준 자바 관례</p>\n<ol>\n<li>정적 공개 상수</li>\n<li>정적 비공개 변수</li>\n<li>비공개 인스턴스 변수</li>\n<li>공개 변수 (필요한 경우는 거의 없음)</li>\n<li>공개 함수</li>\n<li>비공개 함수 (자신을 호출하는 공개 함수 직후)</li>\n</ol>\n<p>추상화 단계가 순차적으로 내려간다.</p>\n<p>✳ <em>캡슐화</em></p>\n<p>변수와 유틸리티 함수는 가능한 공개하지 않는 편이 낫지만 반드시 숨겨야 한다는 법칙도 없다. 때로는 변수나 유틸리티 함수를 protected로 선언해 테스트 코드에 접근을 허용하기도 한다.\r\n하지만 그 전에 비공개 상태를 유지할 온갖 방법을 강구해야 한다. 캡슐화를 풀어주는 결정은 언제나 최후의 수단이다.</p>\n<h5>클래스는 작아야 한다!</h5>\n<p>클래스를 만들 때 첫 번째 규칙은 크기다. 클래스는 작아야 한다.\r\n클래스의 크기를 측정하는 척도는 클래스가 맡은 <strong>책임의 수</strong>이다. 클래스 안에 정의된 메서드가 적다고 클래스의 크기가 작은 것은 아니다.</p>\n<p><strong>클래스가 맡은 책임을 작게 갖는 법</strong></p>\n<ul>\n<li>클래스 이름은 해당 클래스 책임을 기술해야 한다.\n<ul>\n<li>간결한 이름이 떠오르지 않는다면 클래스가 너무 커서 그렇다.</li>\n<li>클래스 이름에 Processor, Manager, Supber 등과 같이 모호한 단어가 있다면 클래스가 너무 많은 책임을 떠안겼다는 증거다.</li>\n</ul>\n</li>\n<li>클래스 설명은 if, and, or, but을 사용하지 않고서 25단어 내외로 가능해야 한다.</li>\n</ul>\n<p>✳ <em>단일 책임 원칙</em></p>\n<p>단일 책임 원칙(Single Responsibility Principle, SRP)은 클래스나 모듈을 변경할 이유가 단 하나뿐이어야 한다는 원칙이다.\r\n클래스는 책임, 즉 변경할 이유가 하나여여 한다는 의미다.</p>\n<p>책임, 즉 변경할 이유를 파악하려 애쓰다 보면 코드를 추상화하기도 쉬워진다.</p>\n<p>SRP는 이해하고 지키기 수월한 개념이지만 클래스 설계자가 가장 무시하는 규칙 중 하나다.\r\n그 이유를 한가지 말하자면 우리들 대다수는 '깨끗하고 체계적인 소프트웨어'보다 '돌아가는 소프트웨어'에 초점을 맞추기 때문이다.\r\n이것이 잘못된 건 아니지만 프로그램이 정상으로 돌아간다면 '깨끗하고 체계적인 소프트웨어'라는 다음 관심사로 전환해야 한다.</p>\n<p>큰 클래스 몇 개가 아니라 작은 클래스 여럿으로 이뤄진 시스템이 더 바람직하다.\r\n작은 클래스는 각자 맡은 책임이 하나며, 변경할 이유가 하나며, 다른 작은 클래스와 협력해 시스템에 필요한 동작을 수행한다.</p>\n<p>✳ <em>응집도</em></p>\n<p>클래스는 인스턴스 변수 수가 작아야 한다. 각 클래스 메서드는 클래스 인스턴스 변수를 하나 이상 사용해야 한다.\r\n일반적으로 메서드가 변수를 더 많이 사용할수록 메서드와 클래스는 응집도가 더 높다.</p>\n<p>'함수를 작게, 매개변수 목록을 짧게'라는 전략을 따르다 보면 때때로 몇몇 메서드만이 사용하는 인스턴스 변수가 아주 많아진다.\r\n이는 새로운 클래스로 쪼개야 한다는 신호다. 응집도가 높아지도록 변수와 메서드를 적절히 분리해 새로운 클래스 두세 개로 쪼개준다.</p>\n<p>✳ <em>응집도를 유지하면 작은 클래스 여럿이 나온다</em></p>\n<p>큰 함수를 작은 함수로 쪼갤 때 변수들을 인스턴스 변수로 바꾼다면 함수를 쪼개기 쉬워진다. 하지만 몇몇 함수만 사용하는 인스턴스 변수가 늘어나기 때문에\r\n클래스의 응집도는 낮아진다. 클래스 응집도가 낮아진다면 여러 클래스로 쪼갠다!\r\n그래서 큰 함수를 작은 함수 여럿으로 조개다 보면 종종 작은 클래스 여럿으로 쪼갤 기회가 생긴다. 그러면서\r\n프로그램에 점점 더 체계가 잡히고 구조가 투명해진다.</p>\n<h5>변경하기 쉬운 클래스</h5>\n<p>대다수 시스템은 지속적인 변경이 가해진다. 그리고 뭔가 변경할 때마다 시스템이 의도대로 동작하지 않을 위험이 따른다.\r\n<strong>깨끗한 시스템은 클래스를 체계적으로 정리해 변경에 수반하는 위험을 낮춘다.</strong></p>\n<p>📌 OCP(Open-Closed Principle)\r\n: 클래스는 확장에 개방적이고 수정에 폐쇄적이어야 한다는 원칙</p>\n<p>새 기능을 수정하거나 기존 기능을 변경할 때 건드릴 코드가 최소인 시스템 구조가 바람직하다.\r\n이상적인 시스템이라면 새 기능을 추가할 때 시스템을 확장할 뿐 기존 코드를 변경하지 않는다.</p>\n<p>✳ <em>변경으로부터 격리</em></p>\n<p>요구사항은 변하기 마련이다. 따라서 코드도 변하기 마련이다.\r\n상세한 구현에 의존하는 클라이언트 클래스는 구현이 바뀌면 위험에 빠진다.\r\n그래서 우리는 인터페이스와 추상 클래스를 사용해 구현이 미치는 영향을 격리한다.</p>\n<p>결합도가 낮다란?\r\n각 시스템 요소가 다른 요소로부터 그리고 변경으로부터 잘 격리되어 있다는 의미</p>\n<p><strong>낮은 시스템 결합도의 장점</strong></p>\n<ul>\n<li>유연성과 재사용성도 높아짐</li>\n<li>시스템 요소가 서로 잘 격리되어 있으면 각 요소를 이해하기도 더 쉬워짐</li>\n<li>DIP를 따르는 클래스가 나옴</li>\n</ul>\n<p>📌 DIP(Dependency Inversion Principle)\r\n: 클래스가 상세한 구현이 아니라 추상화에 의존해야 한다는 원칙</p>\n<h3>🎈 오늘 읽은 소감은? 떠오르는 생각을 가볍게 적어보세요.</h3>\n<p>응집도는 높게, 결합도는 낮게.</p>\n<p>얼마전, 우리 팀이 유지보수하는 프로젝트에 한 작업 요청이 왔다.\r\n대충보니 이미 작업해두신 코드가 있어, 요청주신 내용으로 수정만 하면 되는 작업이었다.\r\n5분이면 끝날 작업을 오전 내내 코드를 살펴보다가 겨우 수정했던 경험이 있다.</p>\n<p>지금 생각해보면 변수명도 엉망이었고 코드들은 여기저기 엉켜있었다.\r\n다시금 깨끗한 코드에 대한 중요성을 느낄 수 있었다.</p>\n<p>그런 김에 조금 더 나은 코드로 리팩토링 해 봐야 겠다!ㅎㅎ</p>\n<h3>🎈 궁금한 내용이나, 잘 이해되지 않는 내용이 있다면 적어보세요.</h3>\n<p>응집도라는 단어가 헷갈려서 찾아보았다.</p>\n<h5>응집도란?</h5>\n<p>모듈 또는 클래스 내부의 요소들이 같은 목적을 가지고 논리적으로 결합되어 있는 정도<br/>\r\n높은 응집도를 가진 모듈은 한 가지 작업에 집중하고 관련 기능들을 포함하며, 모듈이나 클래스가 서로 강력하게 연결되어 있음을 의미한다.</p>\n<p>좋은 응집도를 가진 모듈은 유지보수가 쉽고 오류를 찾기 쉽다. 반면에 낮은 응집도를 가진 모듈은 여러 가지 다른 작업을 수행하거나 다양한 책임을 갖고 있어서\r\n코드를 이해하기 어렵고 수정하기 어렵게 만들 수 있다.</p>\n<p>응집도를 높이기 위해서는 모듈이나 클래스의 기능을 명확하게 정의하고 작은 단위로 분할하여 각각의 모듈이나 클래스가 명확한 역할을 수행하도록 설계하는 것이 중요하다.</p>","frontmatter":{"title":"노개북 - 클린코드 Assignment 11","date":"February 12, 2024","description":"노마드코더 개발자북클럽 클린코드 열한번째 과제입니다.","tags":["노개북","노마드코더","개발자북클럽","cleancode"]}},"previous":{"fields":{"slug":"/clean-code-10/"},"frontmatter":{"title":"노개북 - 클린코드 Assignment 10"}},"next":null},"pageContext":{"id":"a2968c4e-5fac-5092-9a6e-f0720e47d132","previousPostId":"55e4b526-2178-5072-8965-6f2097e477f2","nextPostId":null}},"staticQueryHashes":["1085474499","2837417301"],"slicesMap":{}}