{"componentChunkName":"component---src-templates-blog-post-js","path":"/clean-code-04/","result":{"data":{"site":{"siteMetadata":{"title":"Kirahaa"}},"markdownRemark":{"id":"3697ac74-35e9-568e-a291-ccf31a9a3776","excerpt":"📌 1주차 - Assignment #04 📚 TIL (2024.01.29) - 3장. 함수 🎈 책에서 기억하고 싶은 내용을 써보세요. 함수를 잘 만드는 법 작게 만들어라! 함수를 만드는 첫째 규칙은 '작게!'다.\r\n함수를 만드는 둘째 규칙은 '더 작게!'다.\r\n함수는 일반적으로…","html":"<blockquote>\n<p>📌 <strong>1주차 - Assignment #04</strong></p>\n<h4>📚 TIL (2024.01.29) - 3장. 함수</h4>\n</blockquote>\n<h3>🎈 책에서 기억하고 싶은 내용을 써보세요.</h3>\n<h4>함수를 잘 만드는 법</h4>\n<h5>작게 만들어라!</h5>\n<p>함수를 만드는 첫째 규칙은 '작게!'다.\r\n함수를 만드는 둘째 규칙은 '더 작게!'다.<br/>\r\n함수는 일반적으로 2 ~ 4줄 정도로 짧게하는 것이 좋다.\r\n중첩 구조가 생길만큼 함수가 커져서는 안 된다는 뜻이다.<br/>\r\n그러므로 함수에서 들여쓰기 수준은 1단이나 2단을 넘어서면 안 된다.\r\n당연한 말이지만, 그래야 함수는 읽고 이해하기 쉬워진다.</p>\n<h5>한 가지만 해라!</h5>\n<p><strong>\"함수는 한 가지를 해야 한다. 그 한 가지를 잘 해야 한다. 그 한 가지만을 해야 한다.\"</strong><br/></p>\n<p>지정된 함수 이름 아래에서 추상화 수준이 하나인 단계만 수행한다면 그 함수는 한 가지 작업만 한다.\r\n어쨌거나 우리가 함수를 만드는 이유는 큰 개념을 (다시 말해, 함수 이름을) 다음 추상화 수준에서 여러 단계로 나눠 수행하기 위해서가 아니던가.</p>\n<p><strong>함수가 '한 가지'만 하는지 판단하는 방법</strong> - 단순히 다른 표현이 아니라 의미 있는 이름으로 다른 함수를 추출할 수 있다면 그 함수는 여러 작업을 하는 셈이다.</p>\n<h5>Switch 문</h5>\n<p>switch 문은 작게 만들기 어렵다!\r\n다형적 객체를 생성하는 코드 안에서만 꽁꽁 숨겨서 사용하자. - 그렇다고 모든 상황에서 이렇게만 쓰일 수는 없다.</p>\n<h5>서술적인 이름을 사용하라!</h5>\n<p>함수의 좋은 이름: 함수가 하는 일을 잘 표현하는 이름</p>\n<p>\"코드를 읽으면서 짐작했던 기능을 각 루틴이 그대로 수행한다면 깨끗한 코드라고 불러도 되겠다.\"</p>\n<p>길고 서술적인 이름이 짧고 어려운 이름보다 좋다.\r\n길고 서술적인 이름이 길고 서술적인 주석보다 좋다.\r\n함수 이름을 정할 때는 여러 단어가 쉽게 읽히는 명명법을 사용한다.</p>\n<p>모듈 내에서 함수 이름은 같은 문구, 명사, 동사를 사용한다.</p>\n<h5>함수 인수</h5>\n<p>함수에서 이상적인 인수 개수는 0개. 다음은 1개, 2개이다. 3개는 가능한 피하는 편이 좋고 4개 이상은 사용하지 않는게 좋다.</p>\n<h6>- 함수에 인수를 1개 넘기는 이유</h6>\n<h6>1. 인수에 질문을 던지는 경우</h6>\n<deckgo-highlight-code   >\n          <code slot=\"code\">boolean fileExists(&quot;MyFile&quot;)   // String 형식으로 받은 파일 이름이 존재하는지 확인하는 함수</code>\n        </deckgo-highlight-code>\n<h6>2. 인수를 뭔가로 변환해 결과를 반환하는 경우</h6>\n<deckgo-highlight-code   >\n          <code slot=\"code\">InputStream fileOpen(&quot;MyFile&quot;)  // String 형식의 파일 이름을 InputStream으로 리턴받는다.</code>\n        </deckgo-highlight-code>\n<h6>3. 이벤트- 드물게 사용하지만 아주 유용한 함수 형식이다.</h6>\n<ul>\n<li>입력인수만 있으며 출력인수는 없다.</li>\n<li>이벤트 함수는 해당 함수가 이벤트라는 사실이 코드에 명확히 드러나야 한다.</li>\n</ul>\n<deckgo-highlight-code   >\n          <code slot=\"code\">passwordAttemptFailedNtimes(int attempts)  // 비밀번호를 몇 번 틀렸는지 알려주는 함수다</code>\n        </deckgo-highlight-code>\n<h5>부수효과를 일으키지 마라!</h5>\n<p>함수에서 하기로 했던 행위 이외의 행위, 즉 부수효과를 일으키지 마라.</p>\n<ul>\n<li>함수명에서 드러나지 않는 행위를 하는 위험에 처한다.</li>\n<li>시간적인 결합 즉, 특정상황에서만 해당 함수를 호출할 수 있게 된다.</li>\n</ul>\n<h5>명령과 조회를 구분하라</h5>\n<p>함수는 뭔가를 수행하거나 뭔가에 답하거나 둘 중 하나만 해야 한다. 둘 다 하면 혼란을 초래한다.</p>\n<h5>오류 코드보다 예외를 사용하라!</h5>\n<p>명령 함수에서 오류 코드를 반환하는 방식은 명령/조회 분리 규칙을 미묘하게 위반한다.\r\n자칫하면 if 문에서 명령을 표현식으로 사용하기 쉬운 탓이다.</p>\n<deckgo-highlight-code   >\n          <code slot=\"code\">if (deletePage(page) == E_OK)</code>\n        </deckgo-highlight-code>\n<p>위 코드는 동사/형용사 혼란을 일으키지 않는 대신 여러 단계로 중첩되는 코드를 야기한다.\r\n오류 코드를 반환하면 호출자는 오류 코드를 곧바로 처리해야 한다는 문제에 부딪힌다.</p>\n<h5>Try/Catch 블록 뽑아내기</h5>\n<p>try/catch 블록은 원래 추하다. 코드 구조에 혼란을 일으키며, 정상 동작과 오류 처리 동작을 뒤섞는다. 그러므로 try/catch 블록을 별도 함수로 뽑아내는 편이 좋다.</p>\n<h5>반복하지 마라!</h5>\n<p>중복은 소프트웨어의 모든 악의 근원이다.</p>\n<h5>구조적 프로그래밍</h5>\n<p>모든 함수와 함수 내 모든 블록에 입구(entry)와 출구(exit)가 하나만 존재해야 한다.\r\n즉, 함수는 return 문이 하나여야 한다. 루프 안에서 break나 continue는 절대로 안된다.</p>\n<h5>결론 - 함수를 어떻게 짜죠?</h5>\n<p>소프트웨어를 짜는 행위는 여느 글짓기와 비슷하다.\r\n논문이나 기사를 작성할 때는 먼저 생각을 기록한 후 읽기 좋게 다듬는다.\r\n초안은 대개 서투르고 어수선하므로 원하는 대로 읽힐 때까지 말을 다듬고 문장를 고치고 정리한다.</p>\n<p>함수를 짤 때도 마찬가지다. 처음에는 길고 복잡하다. 들여쓰기 단계도 많고 중복된 루프도 많다. 인수 목록도 아주 길다.\r\n이름은 즉흥적이고 코드는 중복된다. 하지만 나는 그 서투른 코드를 빠짐없이 테스트하는 단위 테스트 케이스도 만든다.</p>\n<p>그런 다음 코드를 다듬고, 함수를 만들고, 이름을 바꾸고, 중복을 제거한다. 메서드를 줄이고 순서를 바꾼다. 때로는 전체 클래스를 쪼개기도 한다.\r\n누구도 처음부터 탁 짜내지 않는다.</p>\n<p>진짜 목표는 시스템이라는 이야기를 풀어가는 데 있다는 사실을 명심해야 한다. 우리가 작성하는 함수가 분명하고 정확한 언어로 깔끔하게 같이 맞아떨어져야 이야기를 풀어가기가 쉬워진다는 사실을 기억해야 한다.</p>\n<h3>🎈 오늘 읽은 소감은? 떠오르는 생각을 가볍게 적어보세요.</h3>\n<p>이론적으로는 알고 있던 내용들이었는데, 사실 실무에서는 짧고 간단한 이름을 주로 사용했던 것 같다.<br/>\r\n작게 만들기, 한 가지만 하기, 서술적인 이름을 사용하기, 인수는 되도록이면 적게!</p>\n<p>처음부터 잘 짜여진 코드는 누구에게도 어려운 것이라고 하니 좀 위안이 되었다. 나도 그동안 내가 했던 코드들을 잘 리팩토링 해보며 개선해 가야 겠다!</p>\n<h3>🎈 궁금한 내용이나, 잘 이해되지 않는 내용이 있다면 적어보세요.</h3>\n<p>다형성(polymorphism)이란?</p>\n<p>: 프로그램 언어 각 요소들(상수, 변수, 식, 객체, 메소드 등)이 다양한 자료형(type)에 속하는 것이 허가되는 성질</p>","frontmatter":{"title":"노개북 - 클린코드 Assignment 04","date":"January 29, 2024","description":"노마드코더 개발자북클럽 클린코드 네번째 과제입니다.","tags":["노개북","노마드코더","개발자북클럽","cleancode"]}},"previous":{"fields":{"slug":"/clean-code-03/"},"frontmatter":{"title":"노개북 - 클린코드 Assignment 03"}},"next":null},"pageContext":{"id":"3697ac74-35e9-568e-a291-ccf31a9a3776","previousPostId":"5732ce3e-68a2-5ed5-adc7-952279dd2d29","nextPostId":null}},"staticQueryHashes":["1085474499","2837417301"],"slicesMap":{}}