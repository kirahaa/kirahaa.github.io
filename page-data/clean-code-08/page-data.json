{"componentChunkName":"component---src-templates-blog-post-js","path":"/clean-code-08/","result":{"data":{"site":{"siteMetadata":{"title":"Kirahaa"}},"markdownRemark":{"id":"3c4718ef-d68c-57b7-a5ea-238fd4d2b1bd","excerpt":"📌 2주차 - Assignment #07 📚 TIL (2024.02.08) - 7장. 오류 처리 🎈 책에서 기억하고 싶은 내용을 써보세요. 오류 코드보다 예외를 사용하라 예외를 사용하면 호출자 코드가 더 깔끔해진다. 논리가 오류 처리 코드와 뒤섞이지 않으니까. Try-Catch…","html":"<blockquote>\n<p>📌 <strong>2주차 - Assignment #07</strong></p>\n<h4>📚 TIL (2024.02.08) - 7장. 오류 처리</h4>\n</blockquote>\n<h3>🎈 책에서 기억하고 싶은 내용을 써보세요.</h3>\n<h5>오류 코드보다 예외를 사용하라</h5>\n<p>예외를 사용하면 호출자 코드가 더 깔끔해진다. 논리가 오류 처리 코드와 뒤섞이지 않으니까.</p>\n<h5>Try-Catch-Finally 문부터 작성하라</h5>\n<p>예외에서 프로그램 안에다 <strong>범위를 정의한다</strong>는 사실이 매우 흥미롭다.\r\ntry-catch-finally 문에서 try 블록에 들어가는 코드를 실행하면 어느 시점에서든 실행이 중단된 후 catch 블록으로 넘어갈 수 있다.</p>\n<p>try 블록에서 무슨 일이 생기든지 catch 블록은 프로그램 상태를 일관성 있게 유지해야 한다.</p>\n<p>먼저 강제로 예외를 일으키는 테스트 케이스를 작성한 후 테스트를 통과하게 코드를 작성하는 방법을 권장한다.\r\n그러면 자연스럽게 try 블록의 트랜잭션 범위부터 구현하게 되므로 범위 내에서 트랜잭션 본질을 유지하기 쉬워진다.</p>\n<h5>미확인(unchecked) 예외를 사용하라</h5>\n<p>확인된(checked) 예외는 OCP(Open Closed Principle)를 위반한다.\r\n메서드에서 확인된 예외를 던졌는데 catch 블록이 세 단계 위에 있다면 그 사이 메서드 모두가 선언부에 해당 예외를 정의해야 한다.\r\n즉, 하위 단계에서 코드를 변경하면 상위 단계 메서드 선언부를 전부 고쳐야 한다는 말이다.\r\n모듈과 관련된 코드가 전혀 바뀌지 않았더라도 (선언부가 바뀌었으므로) 모듈을 다시 빌드한 다음 배포해야 한다는 말이다.</p>\n<p>때로는 확인된 예외도 유용하다. 아주 중요한 라이브러리를 작성한다면 모든 예외를 잡아야 한다.\r\n하지만 일반적인 애플리케이션은 의존성이라는 비용이 이익보다 크다.</p>\n<h5>예외에 의미를 제공하라</h5>\n<p>예외를 던질 때는 전후 상황을 충분히 덧붙인다. 그러면 오류가 발생한 원인과 위치를 찾기가 쉬워진다.\r\n자바는 모든 예외에 호출 스택을 제공한다.\r\n하지만 실패한 코드의 의도를 파악하려면 호출 스택만으로 부족하다.</p>\n<p>오류 메시지에 정보를 담아 예외와 함께 던진다. 실패한 연산 이름과 실패 유형도 언급한다. 애플리케이션이 로깅 기능을 사용한다면 catch 블록에서 오류를 기록하도록 충분한 정보를 남겨준다.</p>\n<h5>호출자를 고려해 예외 클래스를 정의하라</h5>\n<p>애플리케이션에서 오류를 정의할 때 프로그래머에게 가장 중요한 관심사는 <strong>오류를 잡아내는 방법</strong>이 되어야 한다.\r\n흔히 예외 클래스가 하나만 있어도 충분한 코드가 많다.\r\n예외 클래스에 포함된 정보로 오류를 구분해도 괜찮은 경우가 그렇다.\r\n한 예외는 잡아내고 다른 예외는 무시해도 괜찮은 경우라면 여러 예외 클래스를 사용한다.</p>\n<h5>null을 반환하지 마라</h5>\n<p>우리가 흔히 저지르는 오류를 범하는 습관이 있다. 그 중 첫째가 <code>null</code>을 반환하는 습관이다.</p>\n<deckgo-highlight-code   >\n          <code slot=\"code\">public void registerItem(Item item) {\r\n    if (item != null) {\r\n        ItemRegistry registry = peristentStore.getItemRegistry();\r\n        if (registry != null) {\r\n            Item existing = registry.getItem(item.getID());\r\n            if (existing.getBillingPeriod().hasRetailOwner()) {\r\n                existing.register(item);\r\n            }\r\n        }\r\n    }\r\n} </code>\n        </deckgo-highlight-code>\n<p>위 코드는 나쁜 코드이다! <code>null</code>을 반환하는 코드는 일거리를 늘릴 뿐만 아니라 호출자에게 문제를 떠넘긴다.\r\n누구하나라도 <code>null</code> 확인을 빼먹는다면 애플리케이션이 통제 불능에 빠질지도 모른다.\r\n위 코드는 null 확인이 누락된 문제라 말하기 쉽다.\r\n하지만 실상은 null 확인이 너무 많아 문제다. 메서드에서 null을 반환하고픈 유혹이 든다면 그 대신 예외를 던지거나 특수 사례 객체를 반환한다.\r\n사용하려는 외부 API가 null을 반환한다면 감싸기 메서드를 구현해 예외를 던지거나 특수 사례 객체를 반환하는 방식을 고려한다.</p>\n<deckgo-highlight-code   >\n          <code slot=\"code\">List&lt;Employee&gt; employees = getEmployees();\r\nif (employees != null) {\r\n    for(Employee e : employees) {\r\n        totalPay += e.getPay();\r\n    }\r\n}</code>\n        </deckgo-highlight-code>\n<p>위에서 getEmployees는 null도 반환한다. 하지만 반드시 null을 반환할 필요가 있을까? getEmployees를 변경해 빈 리스트를 반환한다면 코드가 훨씬 깔끔해 진다.</p>\n<deckgo-highlight-code   >\n          <code slot=\"code\">List&lt;Employee&gt; employees = getEmployees();\r\nfor(Employee e : employees) {\r\n    totalPay += e.getPay();\r\n}</code>\n        </deckgo-highlight-code>\n<p>다행히 자바에는 Collections.emptyList()가 있어 미리 정의된 읽기 전용 리스트를 반환한다. 우리 목적에 적합한 리스트다.</p>\n<deckgo-highlight-code   >\n          <code slot=\"code\">public List&lt;Employee&gt; getEmployees() {\r\n    if ( ... 직원이 없다면 ... ) \r\n        return Collections.emptyList();\r\n}</code>\n        </deckgo-highlight-code>\n<p>이렇게 코드를 변경하면 코드도 깔끔해질뿐더러 NullPointException이 발생할 가능성도 줄어든다.</p>\n<h5>null을 전달하지 마라</h5>\n<p>메서드에서 null을 반환하는 방식도 나쁘지만 메서드로 null을 전달하는 방식은 더 나쁘다. 정상적인 인수로 null을 기대하는 API가 아니라면\r\n메서드로 null을 전달하는 코드는 최대한 피한다.</p>\n<p>대다수 프로그래밍 언어는 호출자가 실수로 넘기는 null을 적절히 처리하는 방법이 없다. 그렇다면 애초에 null을 넘기지 못하도록 금지하는 정책이 합리적이다.\r\n즉, 인수로 null이 넘어오면 코드에 문제가 있다는 말이다. 이런 정책을 따르면 그만큼 부주의한 실수를 저지를 확률도 작아진다.</p>\n<blockquote>\n<p>깨끗한 코드는 읽기도 좋아야 하지만 안정성도 높아야 한다.\r\n이 둘은 상충하는 목표가 아니다. 오류 처리를 프로그램 논리와 분리해 독자적인 사안으로 고려하면 튼튼하고 깨끗한 코드를 작성할 수 있다.\r\n오류 처리를 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성도 크게 높아진다.</p>\n</blockquote>\n<h3>🎈 오늘 읽은 소감은? 떠오르는 생각을 가볍게 적어보세요.</h3>\n<p>프로그래밍 시작한 초기에는 오류고 뭐고 일단 잘 동작만 되기를 바라며 코드를 작성했었는데,\r\n실무를 경험하면서 처음부터 예외를 작성하는 것에 대한 중요성을 알게 되었다.\r\n특히나 예외 작성할 때 null을 사용하는 습관이 있었는데, 이것도 좋지 않은 방법이라고 해서 뜨금했다..</p>\n<h3>🎈 궁금한 내용이나, 잘 이해되지 않는 내용이 있다면 적어보세요.</h3>\n<p>JAVA에는 아무것도 없는 불변 리스트를 반환하는 Collections.emptyList()라는 메서드가 있는것 같은데,\r\nJavascript에서는 그냥 빈 배열 만들어서 사용하면 되는 거겠죠..?\r\nJAVA로 예제가 나오니까 헷갈린다ㅠ</p>","frontmatter":{"title":"노개북 - 클린코드 Assignment 08","date":"February 08, 2024","description":"노마드코더 개발자북클럽 클린코드 여덟번째 과제입니다.","tags":["노개북","노마드코더","개발자북클럽","cleancode"]}},"previous":{"fields":{"slug":"/clean-code-07/"},"frontmatter":{"title":"노개북 - 클린코드 Assignment 07"}},"next":{"fields":{"slug":"/clean-code-09/"},"frontmatter":{"title":"노개북 - 클린코드 Assignment 09"}}},"pageContext":{"id":"3c4718ef-d68c-57b7-a5ea-238fd4d2b1bd","previousPostId":"dfcc699e-f5f8-567a-b3a2-611af27f216c","nextPostId":"b439e03a-254f-570e-ae9b-e16cca472d94"}},"staticQueryHashes":["1085474499","2837417301"],"slicesMap":{}}