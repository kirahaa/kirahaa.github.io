{"componentChunkName":"component---src-templates-blog-post-js","path":"/nextjs-calendar/","result":{"data":{"site":{"siteMetadata":{"title":"Kirahaa"}},"markdownRemark":{"id":"2bc9f419-ae79-57ad-b7c6-833f6c136546","excerpt":"…","html":"<p>간만에 쓰는 블로그네욤..</p>\n<p>오늘은 얼마전 기업 기술 과제로 캘린더 컴포넌트를 만들었던 경험이 있었는데,\n만들면서 꽤나 배운 점들이 많아서 기록해 보려고 합니다.</p>\n<p>한 번 만들어봤다고 해도, 따로 정리나 기록을 해놓지 않으면 나중에 생각했을 때 남는 점이 없는 것 같아요.\n(만든지 일주일됐는데 벌써 가물가물한 1인..😮‍💨)</p>\n<p>그런 의미에서 나중의 '나 자신'을 위해 잘 기록해 보려고 합니다. 레츠꼬~!</p>\n<hr>\n<h2>Next.js ?</h2>\n<p>Next.js는 리액트를 위해 만든 <strong>오픈소스 자바스크립트 웹 프레임워크</strong>로, 리액트에는 없는\n서버 사이드 렌더링(server-side rendering, SSR), 정적 사이트 생성(static site generation, SSG), 증분 정적 재생성(incremental static regeneration, ISR)과 같은 기능을 제공한다고 합니다.</p>\n<p>SSR? SSG? ISR? 용어가 너무 어렵고 복잡해보이는데, 알기 쉽게 정리를 해봅시다.</p>\n<blockquote>\n<p><strong>브라우저 렌더링?</strong><br/>\n우선 렌더링이란 <strong>브라우저가 서버로부터 받은 데이터를 브라우저 화면에 표시해주는 작업</strong>입니다.<br/>\n즉, 브라우저가 서버로부터 HTML, CSS, Javascript 파일을 전달받고, 브라우저의 렌더링 엔진이 각 파일을 해석해 브라우저 화면을 그려주는 것이죠.</p>\n</blockquote>\n<p>이러한 렌더링 방식은 '클라이언트 사이드 렌더링(CSR)'과 '서버 사이드 렌더링(SSR)'으로 나뉩니다.\n두 방식의 차이점을 간단하게 말하면 <strong>화면을 어디서 그리느냐</strong>입니다.</p>\n<p>클라이언트 사이드 렌더링은 '브라우저'에서 그리고, 서버 사이드 렌더링은 '서버'에서 다 그려서 브라우저로 보내줍니다.</p>\n<h4>클라이언트 사이드 렌더링(CSR)</h4>\n<p>: 클라이언트인 브라우저가 렌더링을 처리하는 방식<br/>\n서버에서 받은 데이터를 클라이언트인 브라우저가 화면(view)에 그립니다.</p>\n<ul>\n<li>React, Vue, Angular와 같은 프레임워크로 개발한 SPA(Single Page Application)이 클라이언트 사이드 렌더링 방식입니다.</li>\n<li>브라우저에서 Javascript로 페이지를 렌더링합니다.</li>\n</ul>\n<h5>🔸 특징</h5>\n<p>모든 JS 파일을 브라우저에서 Javscript로 페이지를 렌더링하기 때문에 사용자의 인터렉션에 빠르게 응답하고, 새로고침이 발생하지 않아 사용자 경험이 좋다는 장점이 있습니다.\n다만 서버에 첫 요청 시에 전체 페이지에 대한 모든 파일을 받아야 하므로 첫 페이지 로딩 속도가 느립니다.\n그리고 HTML 파일이 거의 비어있기 때문에 검색 엔진에 색인할 내용이 많지 않아 SEO에 불리합니다.</p>\n<h4>서버 사이드 렌더링(SSR)</h4>\n<p>: 서버가 렌더링을 처리하는 방식\n클라이언트가 서버에 데이터를 요청하면, 매번 서버에서 새로운 화면(view)을 그려 제공합니다.</p>\n<p>서버 사이드 렌더링은 웹 페이지의 HTML을 서버에서 생성하여 클라이언트로 전송하는 방법입니다.</p>\n<p>첫 페이지에 해당하는 문서만 전달하면 되기 때문에, 첫 페이지 로딩 속도가 클라이언트 사이드 렌더링보다 빠릅니다.\n또한, HTML에 모든 컨텐츠가 담겨있기 때문에 SEO에 유리하다는 장점이 있습니다.</p>\n<p>다만, 유저가 다른 페이지의 데이터를 요청할 때마다 전체 화면을 서버로부터 다시 받아와야 하므로, 페이지 이동시 속도가 더 느리고,\n새로고침이 일어날 때 화면이 깜빡여 좋지 않은 사용자 경험을 줄 수 있습니다.\n페이지를 이동할 때마다 서버에서 모든 컨텐츠를 HTML을 그려 보내줘야 하기 때문에 사용자가 많아질 수록 서버에 데이터를 요청하는 횟수가 증가해 서버에 과부하가 걸릴 수 있습니다.</p>","frontmatter":{"title":"Next.js 캘린더 컴포넌트 만들기","date":"September 03, 2024","description":"Next.js + Typescript 환경에서 캘린더 컴포넌트 만들기","tags":["Next","calendar","components"]}},"previous":{"fields":{"slug":"/clean-code-12/"},"frontmatter":{"title":"노개북 - 클린코드 Assignment 12"}},"next":{"fields":{"slug":"/ssr-csr/"},"frontmatter":{"title":"클라이언트 사이드 렌더링(CSR)과 서버 사이드 렌더링(SSR)"}}},"pageContext":{"id":"2bc9f419-ae79-57ad-b7c6-833f6c136546","previousPostId":"68f359d7-7ccf-536d-b757-e76d88cdd994","nextPostId":"ead19cad-726f-5c19-8759-d0fb366b8d27"}},"staticQueryHashes":["1085474499","2837417301"],"slicesMap":{}}