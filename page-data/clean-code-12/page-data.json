{"componentChunkName":"component---src-templates-blog-post-js","path":"/clean-code-12/","result":{"data":{"site":{"siteMetadata":{"title":"Kirahaa"}},"markdownRemark":{"id":"de958442-be60-595b-b07b-db6437b3ed74","excerpt":"📌 3주차 - Assignment #12 📚 TIL (2024.02.13) - 1…","html":"<blockquote>\n<p>📌 <strong>3주차 - Assignment #12</strong></p>\n<h4>📚 TIL (2024.02.13) - 11장. 시스템</h4>\n</blockquote>\n<h3>🎈 책에서 기억하고 싶은 내용을 써보세요.</h3>\n<p><em>\"복잡성은 죽음이다. 개발자에게서 생기를 앗아가며, 제품을 계획하고 제작하고 테스트하기 어렵게 만든다.\" - 레이 오지, 마이크로소프트 최고 기술 책임자(CTO)</em></p>\n<h5>도시를 세운다면?</h5>\n<p>이미 세워진 도시라도 한 사람의 힘으로는 무리다.\r\n도시에는 각 분야를 관리하는 팀이 있기에 잘 돌아간다. <br/>\r\n도시가 돌아가는 또 다른 이유는 적절한 추상화와 모듈화 때문이다.\r\n그래서 큰 그림을 이해하지 못할지라도 개인과 개인이 관리하는 '구성요소'는 효율적으로 돌아간다.</p>\n<p>흔히 소프트웨어 팀도 도시처럼 구성한다. 그런데 막상 팀이 제작하는 시스템은 비슷한 수준으로 관심사를 분리하거나 추상화를 이뤄내지 못한다.\r\n깨끗한 코드를 구현하면 낮은 추상화 수준에서 관심사를 분리하기 쉬워진다. 이 장에서는 높은 추상화 수준, 즉 시스템 수준에서도 깨끗함을 유지하는 방법을 살펴본다.</p>\n<h5>시스템 제작과 시스템 사용을 분리하라</h5>\n<p>우선 제작(construction)은 사용(use)과 아주 다르다는 사실을 명심한다.</p>\n<p><em>소프트웨어 시스템은 (애플리케이션 객체를 제작하고 의존성을 서로 '연결'하는) 준비 과정과 (준비 과정 이후에 이어지는) 런타임 로직을 분리해야 한다.</em></p>\n<p>시작 단계는 모든 애플리케이션이 풀어야 할 <strong>관심사</strong>(concern)다.\r\n<strong>관심사 분리</strong>는 우리 분야에서 가장 오래되고 가장 중요한 설계 기법 중 하나다.\r\n불행히도 대다수 애플리케이션은 시작 단계라는 관심사를 분리하지 않는다.\r\n준비 과정 코드를 주먹구구식으로 구현할 뿐만 아니라 런타임 로직과 마구 뒤섞는다.</p>\n<deckgo-highlight-code   >\n          <code slot=\"code\">public Service getService() {\r\n    if (service == null)\r\n        service = new MyServiceImpl(...);  // 모든 상황에 적합한 기본값일까?\r\n    return service;\r\n}</code>\n        </deckgo-highlight-code>\n<p>이것이 초기화 지연(Lazy Initialization) 혹은 계산 지연(Lazy Evaluation)이라는 기법이다.</p>\n<p><strong>장점</strong></p>\n<ol>\n<li>실제로 필요할 때까지 객체를 생성하지 않으므로 불필요한 부하가 걸리지 않는다. → 애플리케이션을 시작하는 시간이 그만큼 빨라짐.</li>\n<li>어떤 경우에도 null 포인터를 반환하지 않는다.</li>\n</ol>\n<p><strong>단점</strong></p>\n<ol>\n<li><code>getService</code> 메서드가 <code>MyServiceImpl</code>과 생성자 인수에 명시적으로 의존한다.</li>\n<li>런타임 로직에서 <code>MyServiceImpl</code> 객체를 전혀 사용하지 않더라도 의존성을 해결하지 않으면 컴파일이 안 된다.</li>\n</ol>\n<p><code>MyServiceImpl</code>이 무거운 객체라면 단위 테스트에서 <code>getService</code> 메서드를 호출하기 전에 적절한 <strong>테스트 전용 객체</strong>를 service 필드에 할당해야 한다.\r\n또한 일반 런타임 로직에다 객체 생성 로직을 섞어놓은 탓에 (service가 null인 경로와 null이 아닌 경로 등) 모든 실행 경로도 테스트해야 한다.\r\n책임이 둘이라는 말음 메서드가 작업을 두 가지 이상 수행한다는 의미다. 즉, 작게나마 <strong>단일 책임 원칙</strong>(Single Responsibility Principle, SRP)을 깬다는 말이다.</p>\n<p>무엇보다 <code>MyServiceImpl</code>이 모든 상황에 적합한 객체인지 모른다는 사실이 가장 큰 우려다.\r\n그렇다고 <code>getService</code> 메서드를 포함한 클래스가 전체 문맥을 알 필요가 있을까?\r\n과연 이 시점에서 어떤 객체를 사용할지 알 수나 있을까? 현실적으로 한 객체 유형이 모든 문맥에 적합할 가능성이 있을까?</p>\n<p>초기화 지연 기법을 한 번 정도 사용한다면 별로 심각한 문제가 아니다.\r\n하지만 많은 애플리케이션이 이처럼 좀스러운 설정 기법을 수시로 사용한다.\r\n그래서 전반적인 설정 방식이 (뭔가 방식이 있다면) 애플리케이션 곳곳에 흩어져 있다.\r\n모듈성은 저조하며 대개 중복이 심하다.\r\n체계적이고 탄탄한 시스템을 만들고 싶다면 설정 논리는 일반 실행 논리와 분리해야 모듈성이 높아진다.\r\n또한 주요 의존성을 해소하기 위한 방식, 즉 전반적이며 일관적인 방식도 필요하다.</p>\n<p>✳ <em>Main 분리</em></p>\n<p>시스템 생성과 시스템 사용을 분리하는 한 가지 방법으로, 생성과 관련한 코드는 모두 main이나 main이 호출하는 모듈로 옮겨지고,\r\n나머지 시스템은 모든 객체가 생성되었고 모든 의존성이 연결되었다고 가정한다.</p>\n<p>✳ <em>팩토리</em></p>\n<p>객체가 생성되는 시점을 애플리케이션에서 결정할 필요도 생긴다.\r\nmain에서 factory 객체를 만들어서 전달하면 된다. 만약 자세한 구현을 숨기고 싶다면 Abstract Factory 패턴을 사용하자.\r\n생성하는 시점은 애플리케이션이 결정하지만 생성하는 코드는 모른다. (전달받은 factory 사용)</p>\n<p>✳ <em>의존성 주입</em></p>\n<p>사용과 제작을 분리하는 강력한 매커니즘이다.\r\n의존성 주입은 제어역전(loC) 기법을 의존성 관리에 적용한 메커니즘이다.\r\n제어 역전에서는 한 객체가 맡은 보조 책임을 새로운 객체에게 전적으로 떠넘긴다.\r\n새로운 객체는 넘겨받은 책임만 맡으므로 단일 책임원칙을 지키게된다.</p>\n<p>진정한 의존성 주입은 한 단계 더 나아가 완전히 수동적인 형태를 지닌다.\r\n의존성을 필요로 하는 객체가 직업 의존성을 해결(생성, 연결)하는 대신 생성자/setter 등을 통해 DI 컨테이너가 해당 의존성을 해결하도록 도와준다.(DI / IoC)</p>\n<h5>확장</h5>\n<p>군락은 마을로, 마을은 도시로 성장한다. 성장에는 고통이 따른다.</p>\n<p>'확장' 공사로 꽉 막힌 도로에서 \"왜 처음부터 넓게 만들지 않았지?\"라고 자문한 적이 얼마나 많던가?</p>\n<p>'처음부터 올바르게' 시스템을 만들 수 있다는 믿음은 미신이다. 대신 우리는 오늘 주어진 사용자 스토리에 맞춰 시스템을 구현해야 한다.\r\n내일은 새로운 스토리에 맞춰 시스템을 조정하고 확장하면 된다. 이것이 반복적이고 점진적인 애자일 방식의 핵심이다.\r\nTDD, 리팩터링으로 얻어지는 깨끗한 코드는 코드 수준에서 시스템을 조정하고 확장하기 쉽게 만든다.</p>\n<p>하지만 시스템 수준에서는 어떨까?</p>\n<blockquote>\n<p>소프트웨어 시스템은 물리적인 시스템과 다르다. 관심사를 적절히 분리해 관리한다면 소프트웨어 아키텍처는 점진적으로 발전할 수 있다.</p>\n</blockquote>\n<p>자바에서 사용하는 관점 혹은 관점과 유사한 메커니즘 세 개를 살펴보자.</p>\n<h5>자바 프록시</h5>\n<p>단순한 상황에 적합하다. 개별 객체나 클래스에서 메서드 호출을 감싸는 경우가 좋은 예다.\r\n하지만 JDK에서 제공하는 동적 프록시는 인터페이스만 지원한다.\r\n클래스 프록시를 사용하려면 CGLIB, ASM, Javassist 등과 같은 바이트 코드 처리 라이브러리가 필요하다.\r\n프록시를 사용하면 깨끗한 코드를 작성하기 어렵다! 또한 프록시는 시스템 단위로 실행 '지점'을 명시하는 메커니즘도 제공하지 않는다.</p>\n<h5>순수 자바 AOP 프레임워크</h5>\n<p>대부분의 프록시 코드는 비슷해서 도구로 자동화할 수 있다.\r\n순수 자바 관점을 구현하는 스프링 AOP, JBoss AOP 등과 같은 여러 자바 프레임워크는 내부적으로 프록시를 사용한다.\r\n스프링은 비즈니스 논리를 POJO로 구현한다. 따라서 테스트가 개념적으로 더 쉽고 간단하다.</p>\n<p>프로그래머는 설정 파일이나 API를 사용해 필수적인 애플리케이션 기반 구조를 구현한다.\r\n여기에는 영속성, 트랜잭션, 보안, 캐시, 장애조치 등과 같은 횡단 관심사도 포함된다.</p>\n<h5>AspectJ 관점</h5>\n<p>관심사를 관점으로 분리하는 가장 강력한 도구는 AspectJ 언어다.\r\nAspectJ는 언어 차원에서 관점을 모듈화 구성으로 지원하는 자바 언어 확장이다.\r\n다만 이를 사용하기 위해 새언어 문법과 사용법을 익혀야 한다는 단점이 있다.</p>\n<h5>테스트 주도 시스템 아키텍쳐 구축</h5>\n<p>애플리케이션 도메인 논리를 POJO로 작성할 수 있다면, 즉 코드 수준에서 아키텍쳐 관심사를 분리할 수 있다면, 진정한 테스트 주도 아키텍처 구축이 가능해진다.\r\n그때그때 새로운 기술을 채택해 단순한 아키텍처를 복잡한 아키텍처로 키워갈 수도 있다.</p>\n<p>'아주 단순하면서도' 멋지게 분리된 아키텍처로 소프트웨어 프로젝트를 진행해 결과물을 재빨리 출시한 후, 기반 구조를 추가하며 조금씩 확장해 나가도 괜찮다.\r\n세계 최대 웹 사이트들은 고도의 자료 캐싱, 보안, 가상화 등을 이용해 아주 높은 가용성과 성능을 효율적이고도 유연하게 달성했다.\r\n설계가 최대한 분리되어 각 추상화 수준과 범위에서 코드가 적당히 단순하기 때문이다.</p>\n<p>그렇다고 '아무 방향 없이' 프로젝트에 뛰어들어도 좋다는 소리는 아니다.\r\n프로젝트를 시작할 때는 일반적인 범위, 목표, 일정은 물론이고 결과로 내놓을 시스템의 일반적인 구조도 생각해야 한다.\r\n하지만 변하는 환경에 대처해 진로를 변경할 능력도 반드시 유지해야 한다.</p>\n<blockquote>\n<p>최선의 시스템 구조는 각기 POJO (또는 다른) 객체로 구현되는 모듈화된 관심사 영역(도메인)으로 구성된다.\r\n이렇게 서로 다른 영역은 해당 영역 코드에 최소한의 영향을 미치는 관점이나 유사한 도구를 사용해 통합한다.\r\n이런 구조 역시 코드와 마찬가지로 테스트 주도 기법을 적용할 수 있다.</p>\n</blockquote>\n<h5>의사 결정을 최적화하라</h5>\n<p>모듈을 나누고 관심사를 분리하면 지엽적인 관리와 결정이 가능해진다. 도시든 소프트웨어 프로젝트든, 아주 큰 시스템에서는\r\n한 사람이 모든 결정을 내리기 어렵다.</p>\n<p>가장 적합한 사람에게 책임을 맡기면 가장 좋다. 우리는 때때로 가능한 마지막 순간까지 결정을 미루는 방법이 최선이라는 사실을 까먹곤 한다.\r\n게으르거나 무책임해서가 아니다. 최대한 정보를 모아 최선의 결정을 내리기 위해서다. 성급한 결정은 불충분한 지식으로 내린 결정이다.\r\n너무 일찍 결정하면 고객 피드백을 더 모으고, 프로젝트를 더 고민하고, 구현 방안을 더 탐험할 기회가 사라진다.</p>\n<blockquote>\n<p>관심사를 모듈로 분리한 POJO 시스템은 기민함을 제공한다. 이런 기민함 덕택에 최신 정보에 기반해 최선의 시점에 최적의 결정을 내리기가 쉬워진다.\r\n또한 결정의 복잡성도 줄어든다.</p>\n</blockquote>\n<h5>명백한 가치가 있을 때 표준을 현명하게 사용하라</h5>\n<p>EJB2는 단지 표준이라는 이유만으로 많은 팀이 사용했다.\r\n가볍고 간단한 설계로 충분했을 프로젝트에서도 EJB2를 채택했다.\r\n나는 업계에서 여러 형태로 아주 과장되게 포장된 표준에 집착하는 바람에 고객 가치가 뒷전으로 밀려난 사례를 많이 봤다.</p>\n<p>표준을 사용하면 아이디어와 컴포넌트를 재사용하기 쉽고, 적절한 경험을 가진 사람을 구하기 쉬우며, 좋은 아이디어를 캡슐화하기 쉽고,\r\n컴포넌트를 엮기 쉽다. 하지만 때로는 표준을 만드는 시간이 너무 오래 걸려 업계가 기다리지 못한다.\r\n어떤 표준은 원래 표준을 제정한 목적을 잊어버리기도 한다.</p>\n<h5>시스템은 도메인 특화 언어가 필요하다</h5>\n<p>소프트웨어 분야에서 최근 들어 DSL(Domain-Specific Language)이 새롭게 조명 받기 시작했다.\r\nDSL은 간단한 스크립트 언어나 표준 언어로 구현한 API를 가리킨다. DSL로 짠 코드는 도메인 전문가가 작성한 구조적인 산문처럼 읽힌다.</p>\n<p>좋은 DSL은 도메인 개념과 그 개념을 구현한 코드 사이에 존재하는 '의사소통 간극'을 줄여준다. 애자일 기법이 팀과 프로젝트 이해관계자 사이에 의사소통 간극을 줄여주듯이 말이다.\r\n도메인 전문가가 사용하는 언어로 도메인 논리를 구현하면 도메인을 잘못 구현할 가능성이 줄어든다.</p>\n<p>효과적으로 사용한다면 DSL은 추상화 수준을 코드 관용구나 디자인 패턴 이상으로 끌어올린다. 그래서 개발자가 적절한 추상화 수준에서 코드 의도를 표현할 수 있다.</p>\n<blockquote>\n<p>도메인 특화 언어를 사용하면 고차원 정책에서 저차원 세부사항에 이르기까지 모든 추상화 수준과 모든 도메인을 POJO로 표현할 수 있다.</p>\n</blockquote>\n<h5>결론</h5>\n<p>시스템은 깨끗해야 한다. 깨끗하지 못한 아키텍처는 도메인 논리를 흐리며 기민성을 떨어뜨린다.\r\n도메인 논리가 흐려지면 제품 품질이 떨어진다. 버그가 숨어들기 쉬워지고, 스토리를 구현하기 어려워지는 탓이다.\r\n기민성이 떨어지면 생산성이 낮아져 TDD가 제공하는 장점이 사라진다.\r\n모든 추상화 단계에서 의도는 명확히 표현해야 한다. 그러려면 POJO를 작성하고 관점 혹은 관점과 유사한 메커니즘을 사용해 각 구현 관심사를 분리해야 한다.</p>\n<p>시스템을 설계하든 개별 모듈을 설계하든, 실제로 돌아가는 가장 단순한 수단을 사용해야 한다는 사실을 명심하자.</p>\n<h3>🎈 오늘 읽은 소감은? 떠오르는 생각을 가볍게 적어보세요.</h3>\n<p>내가 직접 시스템을 구축할 일은 잘 없었기 때문에, 읽으면서 너무 추상적으로 다가오긴 했다.</p>\n<p>그래도 역시 공통적인 점은 '깨끗함'이었다. 뭐든지 깨끗하고 단순한게 중요하다.</p>\n<h3>🎈 궁금한 내용이나, 잘 이해되지 않는 내용이 있다면 적어보세요.</h3>\n<p>POJO: Plain Old Java Object. 오래된 방식의 간단한 자바 오브젝트라는 말로서 Java EE 등의 중량 프레임워크들을 사용하게 되면서 해당 프레임워크에 종속된 \"무거운\" 객체를 만들게 된 것에 반발해서 사용된 용어이다.<br/>\r\n특정 '기술'에 종속되어 동작하는 것이 아닌 순수한 자바 객체를 말하는 것.</p>","frontmatter":{"title":"노개북 - 클린코드 Assignment 12","date":"February 13, 2024","description":"노마드코더 개발자북클럽 클린코드 열두번째 과제입니다.","tags":["노개북","노마드코더","개발자북클럽","cleancode"]}},"previous":{"fields":{"slug":"/clean-code-11/"},"frontmatter":{"title":"노개북 - 클린코드 Assignment 11"}},"next":null},"pageContext":{"id":"de958442-be60-595b-b07b-db6437b3ed74","previousPostId":"a2968c4e-5fac-5092-9a6e-f0720e47d132","nextPostId":null}},"staticQueryHashes":["1085474499","2837417301"],"slicesMap":{}}