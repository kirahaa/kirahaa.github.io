{"componentChunkName":"component---src-templates-blog-post-js","path":"/clean-code-06/","result":{"data":{"site":{"siteMetadata":{"title":"Kirahaa"}},"markdownRemark":{"id":"4dbdeeb6-7149-535e-9b88-5a230d47155c","excerpt":"📌 2주차 - Assignment #06 📚 TIL (2024.02.05) - 5장. 형식 맞추기 🎈 책에서 기억하고 싶은 내용을 써보세요. 코드 형식은 중요하다. 코드 형식은 의사소통의 일환이다. 적절한 행 길이를 유지하라 소스 코드는 얼마나 길어야 적당할까?\r\n50…","html":"<blockquote>\n<p>📌 <strong>2주차 - Assignment #06</strong></p>\n<h4>📚 TIL (2024.02.05) - 5장. 형식 맞추기</h4>\n</blockquote>\n<h3>🎈 책에서 기억하고 싶은 내용을 써보세요.</h3>\n<p>코드 형식은 중요하다. 코드 형식은 의사소통의 일환이다.</p>\n<h5>적절한 행 길이를 유지하라</h5>\n<p>소스 코드는 얼마나 길어야 적당할까?\r\n500줄을 넘지 않고 대부분 200줄 정도인 파일로도 커다란 시스템을 구축할 수 있다.\r\n일반적으로 큰 파일보다 작은 파일이 이해하기 쉽다.</p>\n<h5>신문 기사처럼 작성하라</h5>\n<p>소스 파일도 신문 기사와 비슷하게 작성한다. 이름은 간단하면서도 설명이 가능하게 짓는다.\r\n소스 파일 첫 부분은 고차원 개념과 알고리즘을 설명한다. 아래로 내려갈수록 의도를 세세하게 묘사한다.\r\n마지막에는 가장 저차원 함수와 세부 내역이 나온다.</p>\n<h5>개념은 빈 행으로 분리하라</h5>\n<p>거의 모든 코드는 왼쪽에서 오른쪽으로 그리고 위에서 아래로 읽힌다.\r\n각 행은 수식이나 절을 나타내고, 일련의 행 묶음은 완결된 생각 하나를 표현한다.\r\n생각 사이는 빈 행을 넣어 분리해야 마땅하다. 빈 행의 유무로 코드 가독성이 현저하게 차이난다.</p>\n<h5>세로 밀집도</h5>\n<p>줄바꿈이 개념을 분리한다면 세로 밀집도는 연관성을 의미한다. 즉, 서로 밀집한 코드 행은 세로로 가까이 놓아야 한다는 뜻이다.</p>\n<h5>수직 거리</h5>\n<p>서로 밀접한 개념은 세로로 가까이 둬야 한다. 물론 두 개념이 서로 다른 파일에 속한다면 규칙이 통하지 않는다.\r\n하지만 타당한 근거가 없다면 서로 밀접한 개념은 한 파일에 속해야 마땅하다.</p>\n<p><strong>변수 선언</strong> 변수는 사용하는 위치에 최대한 가까이 선언한다.\r\n우리가 만든 함수는 매우 짧으므로 지역 변수는 각 함수 맨 처음에 선언한다.</p>\n<p><strong>인스턴스 변수</strong> 반면, 인스턴스 변수는 클래스 맨 처음에 선언한다.\r\n변수 간에 세로로 거리를 두지 않는다.\r\n잘 설계한 클래스는 클래스의 많은(혹은 대다수) 메서드가 인스턴스 변수를 사용하기 때문이다.</p>\n<p><strong>종속 함수</strong> 한 함수가 다른 함수를 호출한다면 두 함수는 세로로 가까이 배치한다.\r\n또한 가능하다면 호출하는 함수를 호출되는 함수보다 먼저 배치한다. 그러면 프로그램이 자연스럽게 읽힌다.</p>\n<p><strong>개념적 유사성</strong> 어떤 코드는 서로 끌어당긴다.\r\n개념적인 친화도가 높기 때문이다. 친화도가 높을수록 코드를 가까이 배치한다.</p>\n<p>친화도가 높은 요인은 여러 가지인데, 앞서 보았듯이, 한 함수가 다른 함수를 호출해 생기는 직접적인 종속성이 한 예다.\r\n변수와 그 변수를 사용하는 함수도 한 예다. 하지만 그 외에도 친화도를 높이는 요인이 있는데, 비슷한 동작을 수행하는 일군의 함수가 좋은 예다.</p>\n<deckgo-highlight-code   >\n          <code slot=\"code\">public class Assert {\r\n    static public void assertTrue(String message, boolean condition) {\r\n        if(!condition) \r\n        fail(message);\r\n    }\r\n    static public void assertTrue(boolean condition) {\r\n        assertTrue(null, condition);\r\n    }\r\n    static public void assertFalse(String message, boolean condition) {\r\n        assertTrue(message, !condition);\r\n    }\r\n    static public void assertFalse(boolean condition) {\r\n        assertFalse(null, condition);\r\n    }\r\n}</code>\n        </deckgo-highlight-code>\n<p>위 함수들은 개념적인 친화도가 매우 높다. 명명법이 똑같고 기본 기능이 유사하고 간단하다.\r\n서로가 서로를 호출하는 관계는 부차적인 요인이다.\r\n종속적인 관계가 없더라도 가까이 배치할 함수들이다.</p>\n<h5>세로 순서</h5>\n<p>일반적으로 함수 호출 종속성은 아래 방향으로 유지한다.\r\n다시 말해, 호출되는 함수를 호출하는 함수보다 나중에 배치한다. 그러면 소스 코드 모듈이 고차원에서 저차원으로 자연스럽게 내려간다.\r\n신문 기사와 마찬가지로 가장 중요한 개념을 가장 먼저 표현한다. 가장 중요한 개념을 표현할 때는 세세한 사항을 최대한 배제한다.\r\n세세한 사항은 가장 마지막에 표현한다. 그러면 독자가 소스 파일에서 첫 함수 몇 개만 읽어도 개념을 파악하기 쉬워진다.</p>\n<h5>가로 형식 맞추기</h5>\n<p>한 행은 20자에서 60자 사이가 총 행수의 40%에 달한다. 10자 미만은 30% 정도다.\r\n80자 이후부터는 급격하게 감소한다.\r\n프로그래머는 명백하게 짧은 행을 선호한다.\r\n예전에는 오른쪽으로 스크롤할 필요가 없게 코드를 짰다.\r\n하지만 요즘은 모니터가 아주 크다. 개인적으로는 120자 정도로 행 길이를 제한한다.</p>\n<h5>가로 공백과 밀집도</h5>\n<p>가로로는 공백을 사용해 밀접한 개념과 느슨한 개념을 표현한다.</p>\n<deckgo-highlight-code   >\n          <code slot=\"code\">private void measureLine(String line) {\r\n    lineCount++;\r\n    int lineSize = line.length();\r\n    totalChars += lineSize;\r\n    lineWidthHistogram.addLine(lineSize, lineCount);\r\n    recordWidestLine(lineSize);\r\n}</code>\n        </deckgo-highlight-code>\n<p>연산자 우선순위를 강조하기 위해서도 공백을 사용한다.</p>\n<deckgo-highlight-code   >\n          <code slot=\"code\">return (-b + Math.sqrt(determinant)) / (2*a);</code>\n        </deckgo-highlight-code>\n<h5>들여쓰기</h5>\n<p>파일 전체에 적용되는 정보가 있고, 파일 내 개별 클래스에 적용되는 정보가 있고,\r\n클래스 내 각 메서드에 적용되는 정보가 있고, 블록 내 블록에 재귀적으로 적용되는 정보가 있다.\r\n계층에서 각 수준은 이름을 선언하는 범위이자 선언문과 실행문을 해석하는 범위다.</p>\n<p>들여쓰기한 파일은 구조가 한눈에 들어온다. 변수, 생성자 함수, 접근자 함수, 메서드가 금방 보인다.</p>\n<h5>가짜 범위</h5>\n<p>때로는 빈 while 문이나 for 문을 접한다. 이런 구조는 선호하지 않기에 가능한 피해야 하지만 피하지 못할 때는 빈 블록을 올바로 들여쓰고\r\n괄호로 감싼다.\r\nwhile 문 끝에 세미콜론(;) 하나를 살짝 덧붙인 코드로 수없이 고통을 받았다.</p>\n<deckgo-highlight-code   >\n          <code slot=\"code\">while (dis.read(buf, 0, readBufferSize) != -1)\r\n;</code>\n        </deckgo-highlight-code>\n<h5>팀 규칙</h5>\n<p>팀 규칙이라는 제목은 말 장난이다.\r\n프로그래머라면 각자 선호하는 규칙이 있다.\r\n하지만 팀에 속해있다면 자신이 선호해야 할 규칙은 바로 팀 규칙이다.\r\n개개인이 따로국밥처럼 맘대로 짜대는 코드는 피해야 한다.</p>\n<p>좋은 소프트웨어 시스템은 읽기 쉬운 문서로 이뤄진다는 사실을 기억하기 바란다.\r\n스타일은 일관적이고 매끄러워야 한다. 한 소스 파일에서 봤던 형식이 다른 소스 파일에도 쓰이리라는 신뢰감을 독자에게 줘야 한다.\r\n온갖 스타일을 뒤섞어 소스 코드를 필요 이상으로 복잡하게 만드는 실수는 반드시 피한다.</p>\n<h3>🎈 오늘 읽은 소감은? 떠오르는 생각을 가볍게 적어보세요.</h3>\n<p>오늘 내용은 다른 파트에 비해 상대적으로 내가 잘 지키고 있던 부분이라 그런지 어렵지 않았다.<br/>\r\n코딩 공부를 시작한 초반에는 나도 이런 코드 규칙을 정립하는 데 있어 어려움을 겪었었는데,\r\n이제는 나도 나만의 규칙이 생겨서 잘 작성하고 있는 것 같다. (예전에 같은 동료들에게 코드를 보기좋고 깔끔하게 잘 짠다는 칭찬을 받기도 했었다..!ㅎㅎ)</p>\n<p>역시 가장 중요한 것은 '<strong>남이 보기에도 읽기 쉬운가</strong>'인 것 같다.</p>\n<h3>🎈 궁금한 내용이나, 잘 이해되지 않는 내용이 있다면 적어보세요.</h3>\n<p>여전히 아쉬운,, Java 코드 기반 예제 설명ㅠㅠ<br/>\r\n물론 모든 언어의 코드 규칙은 비슷하겠지만, Javscript 버전의 예제로 설명한 cleancode가 있었으면 좋을 것 같다ㅎㅎ</p>","frontmatter":{"title":"노개북 - 클린코드 Assignment 06","date":"February 05, 2024","description":"노마드코더 개발자북클럽 클린코드 여섯번째 과제입니다.","tags":["노개북","노마드코더","개발자북클럽","cleancode"]}},"previous":{"fields":{"slug":"/clean-code-05/"},"frontmatter":{"title":"노개북 - 클린코드 Assignment 05"}},"next":null},"pageContext":{"id":"4dbdeeb6-7149-535e-9b88-5a230d47155c","previousPostId":"75fa25a4-a68c-563d-ad3a-dc4538e461eb","nextPostId":null}},"staticQueryHashes":["1085474499","2837417301"],"slicesMap":{}}